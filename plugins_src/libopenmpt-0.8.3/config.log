This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libopenmpt configure 0.8.3+release.autotools, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  $ ./configure --enable-shared --disable-static --disable-examples --disable-openmpt123 --disable-tests --without-mpg123 --without-flac --without-ogg --without-vorbis --without-vorbisfile

## --------- ##
## Platform. ##
## --------- ##

hostname = vadim-MS-7996
uname -m = x86_64
uname -r = 6.14.0-29-generic
uname -s = Linux
uname -v = #29~24.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Aug 14 16:52:50 UTC 2

/usr/bin/uname -p = x86_64
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /usr/local/sbin/
PATH: /usr/local/bin/
PATH: /usr/sbin/
PATH: /usr/bin/
PATH: /sbin/
PATH: /bin/
PATH: /usr/games/
PATH: /usr/local/games/
PATH: /snap/bin/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2975: looking for aux files: config.guess config.sub ltmain.sh ar-lib compile missing install-sh
configure:2988:  trying ./build-aux/
configure:3017:   ./build-aux/config.guess found
configure:3017:   ./build-aux/config.sub found
configure:3017:   ./build-aux/ltmain.sh found
configure:3017:   ./build-aux/ar-lib found
configure:3017:   ./build-aux/compile found
configure:3017:   ./build-aux/missing found
configure:2999:   ./build-aux/install-sh found
configure:3155: checking for a BSD-compatible install
configure:3228: result: /usr/bin/install -c
configure:3239: checking whether build environment is sane
configure:3294: result: yes
configure:3453: checking for a race-free mkdir -p
configure:3497: result: /usr/bin/mkdir -p
configure:3504: checking for gawk
configure:3539: result: no
configure:3504: checking for mawk
configure:3525: found /usr/bin/mawk
configure:3536: result: mawk
configure:3547: checking whether make sets $(MAKE)
configure:3570: result: yes
configure:3600: checking whether make supports nested variables
configure:3618: result: yes
configure:3768: checking whether make supports the include directive
configure:3783: make -f confmf.GNU && cat confinc.out
this is the am__doit target
configure:3786: $? = 0
configure:3805: result: yes (GNU style)
configure:3881: checking for gcc
configure:3902: found /usr/bin/gcc
configure:3913: result: gcc
configure:4266: checking for C compiler version
configure:4275: gcc --version >&5
gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:4286: $? = 0
configure:4275: gcc -v >&5
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 13.3.0-6ubuntu2~24.04' --with-bugurl=file:///usr/share/doc/gcc-13/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-13 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/libexec --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-libstdcxx-backtrace --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-gcn/usr --enable-offload-defaulted --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04) 
... rest of stderr output deleted ...
configure:4286: $? = 0
configure:4275: gcc -V >&5
gcc: error: unrecognized command-line option '-V'
gcc: fatal error: no input files
compilation terminated.
configure:4286: $? = 1
configure:4275: gcc -qversion >&5
gcc: error: unrecognized command-line option '-qversion'; did you mean '--version'?
gcc: fatal error: no input files
compilation terminated.
configure:4286: $? = 1
configure:4275: gcc -version >&5
gcc: error: unrecognized command-line option '-version'
gcc: fatal error: no input files
compilation terminated.
configure:4286: $? = 1
configure:4306: checking whether the C compiler works
configure:4328: gcc    conftest.c  >&5
configure:4332: $? = 0
configure:4382: result: yes
configure:4385: checking for C compiler default output file name
configure:4387: result: a.out
configure:4393: checking for suffix of executables
configure:4400: gcc -o conftest    conftest.c  >&5
configure:4404: $? = 0
configure:4427: result: 
configure:4449: checking whether we are cross compiling
configure:4457: gcc -o conftest    conftest.c  >&5
configure:4461: $? = 0
configure:4468: ./conftest
configure:4472: $? = 0
configure:4487: result: no
configure:4492: checking for suffix of object files
configure:4515: gcc -c   conftest.c >&5
configure:4519: $? = 0
configure:4541: result: o
configure:4545: checking whether the compiler supports GNU C
configure:4565: gcc -c   conftest.c >&5
configure:4565: $? = 0
configure:4575: result: yes
configure:4586: checking whether gcc accepts -g
configure:4607: gcc -c -g  conftest.c >&5
configure:4607: $? = 0
configure:4651: result: yes
configure:4671: checking for gcc option to enable C11 features
configure:4686: gcc  -c -g -O2  conftest.c >&5
configure:4686: $? = 0
configure:4704: result: none needed
configure:4820: checking whether gcc understands -c and -o together
configure:4843: gcc -c conftest.c -o conftest2.o
configure:4846: $? = 0
configure:4843: gcc -c conftest.c -o conftest2.o
configure:4846: $? = 0
configure:4858: result: yes
configure:4877: checking dependency style of gcc
configure:4989: result: gcc3
configure:5009: checking for stdio.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for stdlib.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for string.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for inttypes.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for stdint.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for strings.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for sys/stat.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for sys/types.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for unistd.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for wchar.h
configure:5009: gcc -c -g -O2  conftest.c >&5
configure:5009: $? = 0
configure:5009: result: yes
configure:5009: checking for minix/config.h
configure:5009: gcc -c -g -O2  conftest.c >&5
conftest.c:49:10: fatal error: minix/config.h: No such file or directory
   49 | #include <minix/config.h>
      |          ^~~~~~~~~~~~~~~~
compilation terminated.
configure:5009: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:5009: result: no
configure:5040: checking whether it is safe to define __EXTENSIONS__
configure:5059: gcc -c -g -O2  conftest.c >&5
configure:5059: $? = 0
configure:5067: result: yes
configure:5070: checking whether _XOPEN_SOURCE should be defined
configure:5092: gcc -c -g -O2  conftest.c >&5
configure:5092: $? = 0
configure:5119: result: no
configure:5231: checking for ar
configure:5252: found /usr/bin/ar
configure:5263: result: ar
configure:5289: checking the archiver (ar) interface
configure:5306: gcc -c -g -O2  conftest.c >&5
configure:5306: $? = 0
configure:5309: ar cru libconftest.a conftest.o >&5
ar: `u' modifier ignored since `D' is the default (see `U')
configure:5312: $? = 0
configure:5340: result: ar
configure:5393: checking build system type
configure:5408: result: x86_64-pc-linux-gnu
configure:5428: checking host system type
configure:5442: result: x86_64-pc-linux-gnu
configure:5483: checking how to print strings
configure:5510: result: printf
configure:5531: checking for a sed that does not truncate output
configure:5601: result: /usr/bin/sed
configure:5619: checking for grep that handles long lines and -e
configure:5683: result: /usr/bin/grep
configure:5688: checking for egrep
configure:5756: result: /usr/bin/grep -E
configure:5761: checking for fgrep
configure:5829: result: /usr/bin/grep -F
configure:5865: checking for ld used by gcc
configure:5933: result: /usr/bin/ld
configure:5940: checking if the linker (/usr/bin/ld) is GNU ld
configure:5956: result: yes
configure:5968: checking for BSD- or MS-compatible name lister (nm)
configure:6023: result: /usr/bin/nm -B
configure:6163: checking the name lister (/usr/bin/nm -B) interface
configure:6171: gcc -c -g -O2  conftest.c >&5
configure:6174: /usr/bin/nm -B "conftest.o"
configure:6177: output
0000000000000000 B some_variable
configure:6184: result: BSD nm
configure:6187: checking whether ln -s works
configure:6191: result: yes
configure:6199: checking the maximum length of command line arguments
configure:6331: result: 1572864
configure:6379: checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format
configure:6420: result: func_convert_file_noop
configure:6427: checking how to convert x86_64-pc-linux-gnu file names to toolchain format
configure:6448: result: func_convert_file_noop
configure:6455: checking for /usr/bin/ld option to reload object files
configure:6463: result: -r
configure:6542: checking for file
configure:6563: found /usr/bin/file
configure:6574: result: file
configure:6650: checking for objdump
configure:6671: found /usr/bin/objdump
configure:6682: result: objdump
configure:6714: checking how to recognize dependent libraries
configure:6915: result: pass_all
configure:7005: checking for dlltool
configure:7040: result: no
configure:7070: checking how to associate runtime and link libraries
configure:7098: result: printf %s\n
configure:7248: checking for archiver @FILE support
configure:7266: gcc -c -g -O2  conftest.c >&5
configure:7266: $? = 0
configure:7270: ar cr libconftest.a @conftest.lst >&5
configure:7273: $? = 0
configure:7278: ar cr libconftest.a @conftest.lst >&5
ar: conftest.o: No such file or directory
configure:7281: $? = 1
configure:7293: result: @
configure:7356: checking for strip
configure:7377: found /usr/bin/strip
configure:7388: result: strip
configure:7465: checking for ranlib
configure:7486: found /usr/bin/ranlib
configure:7497: result: ranlib
configure:7599: checking command to parse /usr/bin/nm -B output from gcc object
configure:7753: gcc -c -g -O2  conftest.c >&5
configure:7756: $? = 0
configure:7760: /usr/bin/nm -B conftest.o | /usr/bin/sed -n -e 's/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | /usr/bin/sed '/ __gnu_lto/d' > conftest.nm
configure:7826: gcc -o conftest -g -O2   conftest.c conftstm.o >&5
configure:7829: $? = 0
configure:7867: result: ok
configure:7914: checking for sysroot
configure:7945: result: no
configure:7952: checking for a working dd
configure:7996: result: /usr/bin/dd
configure:8000: checking how to truncate binary pipes
configure:8016: result: /usr/bin/dd bs=4096 count=1
configure:8153: gcc -c -g -O2  conftest.c >&5
configure:8156: $? = 0
configure:8353: checking for mt
configure:8374: found /usr/bin/mt
configure:8385: result: mt
configure:8408: checking if mt is a manifest tool
configure:8415: mt '-?'
configure:8423: result: no
configure:9144: checking for dlfcn.h
configure:9144: gcc -c -g -O2  conftest.c >&5
configure:9144: $? = 0
configure:9144: result: yes
configure:9403: checking for objdir
configure:9419: result: .libs
configure:9683: checking if gcc supports -fno-rtti -fno-exceptions
configure:9702: gcc -c -g -O2  -fno-rtti -fno-exceptions conftest.c >&5
cc1: warning: command-line option '-fno-rtti' is valid for C++/D/ObjC++ but not for C
configure:9706: $? = 0
configure:9719: result: no
configure:10083: checking for gcc option to produce PIC
configure:10091: result: -fPIC -DPIC
configure:10099: checking if gcc PIC flag -fPIC -DPIC works
configure:10118: gcc -c -g -O2  -fPIC -DPIC -DPIC conftest.c >&5
configure:10122: $? = 0
configure:10135: result: yes
configure:10164: checking if gcc static flag -static works
configure:10193: result: yes
configure:10208: checking if gcc supports -c -o file.o
configure:10230: gcc -c -g -O2  -o out/conftest2.o conftest.c >&5
configure:10234: $? = 0
configure:10256: result: yes
configure:10264: checking if gcc supports -c -o file.o
configure:10312: result: yes
configure:10345: checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries
configure:11619: result: yes
configure:11656: checking whether -lc should be explicitly linked in
configure:11665: gcc -c -g -O2  conftest.c >&5
configure:11668: $? = 0
configure:11683: gcc -shared  -fPIC -DPIC conftest.o  -v -Wl,-soname -Wl,conftest -o conftest 2\>\&1 \| /usr/bin/grep  -lc  \>/dev/null 2\>\&1
configure:11686: $? = 0
configure:11700: result: no
configure:11860: checking dynamic linker characteristics
configure:12442: gcc -o conftest -g -O2   -Wl,-rpath -Wl,/foo conftest.c  >&5
configure:12442: $? = 0
configure:12693: result: GNU/Linux ld.so
configure:12815: checking how to hardcode library paths into programs
configure:12840: result: immediate
configure:13392: checking whether stripping libraries is possible
configure:13401: result: yes
configure:13443: checking if libtool supports shared libraries
configure:13445: result: yes
configure:13448: checking whether to build shared libraries
configure:13473: result: yes
configure:13476: checking whether to build static libraries
configure:13480: result: no
configure:13526: checking for special C compiler options needed for large files
configure:13574: result: no
configure:13580: checking for _FILE_OFFSET_BITS value needed for large files
configure:13606: gcc -c -g -O2  conftest.c >&5
configure:13606: $? = 0
configure:13640: result: no
configure:13782: checking for pkg-config
configure:13805: found /usr/bin/pkg-config
configure:13817: result: /usr/bin/pkg-config
configure:13842: checking pkg-config is at least version 0.24
configure:13845: result: yes
configure:13906: checking for gcc
configure:13938: result: gcc
configure:14291: checking for C compiler version
configure:14300: gcc --version >&5
gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:14311: $? = 0
configure:14300: gcc -v >&5
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 13.3.0-6ubuntu2~24.04' --with-bugurl=file:///usr/share/doc/gcc-13/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-13 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/libexec --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-libstdcxx-backtrace --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-gcn/usr --enable-offload-defaulted --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04) 
... rest of stderr output deleted ...
configure:14311: $? = 0
configure:14300: gcc -V >&5
gcc: error: unrecognized command-line option '-V'
gcc: fatal error: no input files
compilation terminated.
configure:14311: $? = 1
configure:14300: gcc -qversion >&5
gcc: error: unrecognized command-line option '-qversion'; did you mean '--version'?
gcc: fatal error: no input files
compilation terminated.
configure:14311: $? = 1
configure:14300: gcc -version >&5
gcc: error: unrecognized command-line option '-version'
gcc: fatal error: no input files
compilation terminated.
configure:14311: $? = 1
configure:14315: checking whether the compiler supports GNU C
configure:14345: result: yes
configure:14356: checking whether gcc accepts -g
configure:14421: result: yes
configure:14441: checking for gcc option to enable C11 features
configure:14474: result: none needed
configure:14590: checking whether gcc understands -c and -o together
configure:14628: result: yes
configure:14647: checking dependency style of gcc
configure:14759: result: gcc3
configure:14844: checking for g++
configure:14865: found /usr/bin/g++
configure:14876: result: g++
configure:14903: checking for C++ compiler version
configure:14912: g++ --version >&5
g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:14923: $? = 0
configure:14912: g++ -v >&5
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 13.3.0-6ubuntu2~24.04' --with-bugurl=file:///usr/share/doc/gcc-13/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-13 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/libexec --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-libstdcxx-backtrace --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-gcn/usr --enable-offload-defaulted --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04) 
... rest of stderr output deleted ...
configure:14923: $? = 0
configure:14912: g++ -V >&5
g++: error: unrecognized command-line option '-V'
g++: fatal error: no input files
compilation terminated.
configure:14923: $? = 1
configure:14912: g++ -qversion >&5
g++: error: unrecognized command-line option '-qversion'; did you mean '--version'?
g++: fatal error: no input files
compilation terminated.
configure:14923: $? = 1
configure:14927: checking whether the compiler supports GNU C++
configure:14947: g++ -c   conftest.cpp >&5
configure:14947: $? = 0
configure:14957: result: yes
configure:14968: checking whether g++ accepts -g
configure:14989: g++ -c -g  conftest.cpp >&5
configure:14989: $? = 0
configure:15033: result: yes
configure:15053: checking for g++ option to enable C++11 features
configure:15068: g++  -c -g -O2  conftest.cpp >&5
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:206:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  206 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:206:25: note: remove parentheses to default-initialize a variable
  206 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:206:25: note: or replace parentheses with braces to value-initialize a variable
configure:15068: $? = 0
configure:15086: result: none needed
configure:15152: checking dependency style of g++
configure:15264: result: gcc3
configure:15297: checking how to run the C++ preprocessor
configure:15319: g++ -E  conftest.cpp
configure:15319: $? = 0
configure:15334: g++ -E  conftest.cpp
conftest.cpp:40:10: fatal error: ac_nonexistent.h: No such file or directory
   40 | #include <ac_nonexistent.h>
      |          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:15334: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:15361: result: g++ -E
configure:15375: g++ -E  conftest.cpp
configure:15375: $? = 0
configure:15390: g++ -E  conftest.cpp
conftest.cpp:40:10: fatal error: ac_nonexistent.h: No such file or directory
   40 | #include <ac_nonexistent.h>
      |          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:15390: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:15555: checking for ld used by g++
configure:15623: result: /usr/bin/ld -m elf_x86_64
configure:15630: checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld
configure:15646: result: yes
configure:15701: checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries
configure:16779: result: yes
configure:16815: g++ -c -g -O2  conftest.cpp >&5
configure:16818: $? = 0
configure:17299: checking for g++ option to produce PIC
configure:17307: result: -fPIC -DPIC
configure:17315: checking if g++ PIC flag -fPIC -DPIC works
configure:17334: g++ -c -g -O2  -fPIC -DPIC -DPIC conftest.cpp >&5
configure:17338: $? = 0
configure:17351: result: yes
configure:17374: checking if g++ static flag -static works
configure:17403: result: yes
configure:17415: checking if g++ supports -c -o file.o
configure:17437: g++ -c -g -O2  -o out/conftest2.o conftest.cpp >&5
configure:17441: $? = 0
configure:17463: result: yes
configure:17468: checking if g++ supports -c -o file.o
configure:17516: result: yes
configure:17546: checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries
configure:17589: result: yes
configure:17731: checking dynamic linker characteristics
configure:18491: result: GNU/Linux ld.so
configure:18556: checking how to hardcode library paths into programs
configure:18581: result: immediate
configure:18645: checking whether g++ supports C++23 features with -std=c++23
configure:19508: g++ -std=c++23 -c -g -O2  conftest.cpp >&5
conftest.cpp:873:2: error: #error "This is not a C++23 compiler"
  873 | #error "This is not a C++23 compiler"
      |  ^~~~~
conftest.cpp:149:36: warning: 'volatile'-qualified parameter is deprecated [-Wvolatile]
  149 |     test(const int c, volatile int v)
      |                       ~~~~~~~~~~~~~^
configure:19508: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| // MSVC always sets __cplusplus to 199711L in older versions; newer versions
| // only set it correctly if /Zc:__cplusplus is specified as well as a
| // /std:c++NN switch:
| //
| // https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
| //
| // The value __cplusplus ought to have is available in _MSVC_LANG since
| // Visual Studio 2015 Update 3:
| //
| // https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros
| //
| // This was also the first MSVC version to support C++14 so we can't use the
| // value of either __cplusplus or _MSVC_LANG to quickly rule out MSVC having
| // C++11 or C++14 support, but we can check _MSVC_LANG for C++17 and later.
| #elif __cplusplus < 201103L && !defined _MSC_VER
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L && !defined _MSC_VER
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| #error "This is not a C++20 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx20
| {
| 
| // As C++20 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx20
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| #error "This is not a C++23 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx23
| {
| 
| // As C++23 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx23
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| 
| 
configure:19518: result: no
configure:18645: checking whether g++ supports C++23 features with +std=c++23
configure:19508: g++ +std=c++23 -c -g -O2  conftest.cpp >&5
conftest.cpp:847:2: error: #error "This is not a C++20 compiler"
  847 | #error "This is not a C++20 compiler"
      |  ^~~~~
conftest.cpp:873:2: error: #error "This is not a C++23 compiler"
  873 | #error "This is not a C++23 compiler"
      |  ^~~~~
configure:19508: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| // MSVC always sets __cplusplus to 199711L in older versions; newer versions
| // only set it correctly if /Zc:__cplusplus is specified as well as a
| // /std:c++NN switch:
| //
| // https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
| //
| // The value __cplusplus ought to have is available in _MSVC_LANG since
| // Visual Studio 2015 Update 3:
| //
| // https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros
| //
| // This was also the first MSVC version to support C++14 so we can't use the
| // value of either __cplusplus or _MSVC_LANG to quickly rule out MSVC having
| // C++11 or C++14 support, but we can check _MSVC_LANG for C++17 and later.
| #elif __cplusplus < 201103L && !defined _MSC_VER
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L && !defined _MSC_VER
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| #error "This is not a C++20 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx20
| {
| 
| // As C++20 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx20
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| #error "This is not a C++23 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx23
| {
| 
| // As C++23 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx23
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| 
| 
configure:19518: result: no
configure:18645: checking whether g++ supports C++23 features with -h std=c++23
configure:19508: g++ -h std=c++23 -c -g -O2  conftest.cpp >&5
g++: error: unrecognized command-line option '-h'
configure:19508: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| // MSVC always sets __cplusplus to 199711L in older versions; newer versions
| // only set it correctly if /Zc:__cplusplus is specified as well as a
| // /std:c++NN switch:
| //
| // https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
| //
| // The value __cplusplus ought to have is available in _MSVC_LANG since
| // Visual Studio 2015 Update 3:
| //
| // https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros
| //
| // This was also the first MSVC version to support C++14 so we can't use the
| // value of either __cplusplus or _MSVC_LANG to quickly rule out MSVC having
| // C++11 or C++14 support, but we can check _MSVC_LANG for C++17 and later.
| #elif __cplusplus < 201103L && !defined _MSC_VER
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L && !defined _MSC_VER
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| #error "This is not a C++20 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx20
| {
| 
| // As C++20 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx20
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| #error "This is not a C++23 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx23
| {
| 
| // As C++23 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx23
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| 
| 
configure:19518: result: no
configure:18645: checking whether g++ supports C++23 features with -std:c++23
configure:19508: g++ -std:c++23 -c -g -O2  conftest.cpp >&5
g++: error: unrecognized command-line option '-std:c++23'; did you mean '-std=c++23'?
configure:19508: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| // MSVC always sets __cplusplus to 199711L in older versions; newer versions
| // only set it correctly if /Zc:__cplusplus is specified as well as a
| // /std:c++NN switch:
| //
| // https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
| //
| // The value __cplusplus ought to have is available in _MSVC_LANG since
| // Visual Studio 2015 Update 3:
| //
| // https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros
| //
| // This was also the first MSVC version to support C++14 so we can't use the
| // value of either __cplusplus or _MSVC_LANG to quickly rule out MSVC having
| // C++11 or C++14 support, but we can check _MSVC_LANG for C++17 and later.
| #elif __cplusplus < 201103L && !defined _MSC_VER
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L && !defined _MSC_VER
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
|   namespace test_constexpr_lambdas
|   {
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
|   namespace test_structured_bindings
|   {
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| 
|   namespace test_exception_spec_type_system
|   {
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| #error "This is not a C++20 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx20
| {
| 
| // As C++20 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx20
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
| 
| 
| 
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| #error "This is not a C++23 compiler"
| 
| #else
| 
| #include <version>
| 
| namespace cxx23
| {
| 
| // As C++23 supports feature test macros in the standard, there is no
| // immediate need to actually test for feature availability on the
| // Autoconf side.
| 
| }  // namespace cxx23
| 
| #endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
| 
| 
| 
configure:19518: result: no
configure:19547: No compiler with C++23 support was found
configure:19581: checking whether g++ supports C++20 features with -std=c++20
configure:20418: g++ -std=c++20 -c -g -O2  conftest.cpp >&5
conftest.cpp:149:36: warning: 'volatile'-qualified parameter is deprecated [-Wvolatile]
  149 |     test(const int c, volatile int v)
      |                       ~~~~~~~~~~~~~^
configure:20418: $? = 0
configure:20428: result: yes
configure:21366: checking whether C compiler accepts -fvisibility=hidden
configure:21386: gcc -c -g -O2  -fvisibility=hidden  conftest.c >&5
configure:21386: $? = 0
configure:21395: result: yes
configure:21404: checking for C compiler vendor
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__ICC) || defined(__ECC) || defined(__INTEL_COMPILER))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__xlc__) || defined(__xlC__) || defined(__IBMC__) || defined(__IBMCPP__) || defined(__ibmxl__))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__PATHCC__) || defined(__PATHSCALE__))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__clang__))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(_CRAYC))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__FUJITSU))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(SDCC) || defined(__SDCC))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(_SX))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__NVCOMPILER))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
conftest.c: In function 'main':
conftest.c:47:7: error: 'thisisanerror' undeclared (first use in this function)
   47 |       thisisanerror;
      |       ^~~~~~~~~~~~~
conftest.c:47:7: note: each undeclared identifier is reported only once for each function it appears in
configure:21463: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| 
| #if !(defined(__PGI))
|       thisisanerror;
| #endif
| 
|   ;
|   return 0;
| }
configure:21463: gcc -c -g -O2  conftest.c >&5
configure:21463: $? = 0
configure:21473: result: gnu
configure:21486: checking CFLAGS for most reasonable warnings
configure:21573: : CFLAGS="$CFLAGS"
configure:21576: $? = 0
configure:21599: result: -Wall
configure:21622: checking whether C++ compiler accepts -fvisibility=hidden
configure:21642: g++ -std=c++20 -c -g -O2  -fvisibility=hidden  conftest.cpp >&5
configure:21642: $? = 0
configure:21651: result: yes
configure:21670: checking CXXFLAGS for most reasonable warnings
configure:21731: WARNING: Unknown compiler vendor returned by AX_COMPILER_VENDOR
configure:21783: result: 
configure:21800: checking whether the compiler supports exceptions
configure:21823: g++ -std=c++20 -c -g -O2  conftest.cpp >&5
configure:21823: $? = 0
configure:21838: result: yes
configure:21846: checking whether the compiler supports Run-Time Type Identification
configure:21881: g++ -std=c++20 -c -g -O2  conftest.cpp >&5
configure:21881: $? = 0
configure:21896: result: yes
configure:21910: checking how to run the C preprocessor
configure:21936: gcc -E  conftest.c
configure:21936: $? = 0
configure:21951: gcc -E  conftest.c
conftest.c:43:10: fatal error: ac_nonexistent.h: No such file or directory
   43 | #include <ac_nonexistent.h>
      |          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:21951: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| #define HAVE_EXCEPTIONS /**/
| #define HAVE_RTTI /**/
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:21978: result: gcc -E
configure:21992: gcc -E  conftest.c
configure:21992: $? = 0
configure:22007: gcc -E  conftest.c
conftest.c:43:10: fatal error: ac_nonexistent.h: No such file or directory
   43 | #include <ac_nonexistent.h>
      |          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:22007: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libopenmpt"
| #define PACKAGE_TARNAME "libopenmpt"
| #define PACKAGE_VERSION "0.8.3+release.autotools"
| #define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
| #define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
| #define PACKAGE_URL "https://lib.openmpt.org/"
| #define PACKAGE "libopenmpt"
| #define VERSION "0.8.3+release.autotools"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_CXX20 1
| #define HAVE_EXCEPTIONS /**/
| #define HAVE_RTTI /**/
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:22198: checking whether gcc is Clang
configure:22225: result: no
configure:22290: checking whether pthreads work with "-pthread" and "-lpthread"
configure:22401: gcc -o conftest -Wall -g -O2 -pthread   conftest.c -lpthread  >&5
configure:22401: $? = 0
configure:22411: result: yes
configure:22534: checking for joinable pthread attribute
configure:22553: gcc -o conftest -Wall -g -O2 -pthread   conftest.c -lpthread  >&5
configure:22553: $? = 0
configure:22562: result: PTHREAD_CREATE_JOINABLE
configure:22575: checking whether more special flags are required for pthreads
configure:22589: result: no
configure:22598: checking for PTHREAD_PRIO_INHERIT
configure:22616: gcc -o conftest -Wall -g -O2 -pthread   conftest.c -lpthread  >&5
configure:22616: $? = 0
configure:22626: result: yes
configure:22816: checking whether C compiler accepts -fno-ipa-ra
configure:22836: gcc -c -Wall -g -O2  -fno-ipa-ra  conftest.c >&5
configure:22836: $? = 0
configure:22845: result: yes
configure:22864: checking CFLAGS for most reasonable warnings
configure:22977: result: -Wall
configure:22999: checking whether C++ compiler accepts -fno-ipa-ra
configure:23019: g++ -std=c++20 -c -g -O2  -fno-ipa-ra  conftest.cpp >&5
configure:23019: $? = 0
configure:23028: result: yes
configure:23047: checking CXXFLAGS for most reasonable warnings
configure:23160: result: 
configure:23271: checking for zlib
configure:23278: $PKG_CONFIG --exists --print-errors "zlib"
configure:23281: $? = 0
configure:23295: $PKG_CONFIG --exists --print-errors "zlib"
configure:23298: $? = 0
configure:23336: result: yes
configure:24597: checking for doxygen
configure:24635: result: no
configure:24655: WARNING: doxygen not found - will not generate any doxygen documentation
configure:24713: checking for perl
configure:24736: found /usr/bin/perl
configure:24748: result: /usr/bin/perl
configure:26719: checking that generated files are newer than configure
configure:26725: result: done
configure:26776: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libopenmpt config.status 0.8.3+release.autotools, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on vadim-MS-7996

config.status:1177: creating Makefile
config.status:1177: creating libopenmpt/libopenmpt.pc
config.status:1177: creating Doxyfile
config.status:1349: executing depfiles commands
config.status:1426: cd .       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make: Nothing to be done for 'am--depfiles'.
config.status:1431: $? = 0
config.status:1349: executing libtool commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-pc-linux-gnu
ac_cv_c_compiler_gnu=yes
ac_cv_cflags_warn_all=-Wall
ac_cv_cxx_compiler_gnu=yes
ac_cv_cxxflags_warn_all=
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_CXXCPP_set=
ac_cv_env_CXXCPP_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXXSTDLIB_PCLIBSPRIVATE_set=
ac_cv_env_CXXSTDLIB_PCLIBSPRIVATE_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_DOXYGEN_PAPER_SIZE_set=
ac_cv_env_DOXYGEN_PAPER_SIZE_value=
ac_cv_env_FLAC_CFLAGS_set=
ac_cv_env_FLAC_CFLAGS_value=
ac_cv_env_FLAC_LIBS_set=
ac_cv_env_FLAC_LIBS_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LT_SYS_LIBRARY_PATH_set=
ac_cv_env_LT_SYS_LIBRARY_PATH_value=
ac_cv_env_MPG123_CFLAGS_set=
ac_cv_env_MPG123_CFLAGS_value=
ac_cv_env_MPG123_LIBS_set=
ac_cv_env_MPG123_LIBS_value=
ac_cv_env_OGG_CFLAGS_set=
ac_cv_env_OGG_CFLAGS_value=
ac_cv_env_OGG_LIBS_set=
ac_cv_env_OGG_LIBS_value=
ac_cv_env_PKG_CONFIG_LIBDIR_set=
ac_cv_env_PKG_CONFIG_LIBDIR_value=
ac_cv_env_PKG_CONFIG_PATH_set=
ac_cv_env_PKG_CONFIG_PATH_value=
ac_cv_env_PKG_CONFIG_set=
ac_cv_env_PKG_CONFIG_value=
ac_cv_env_PORTAUDIOCPP_CFLAGS_set=
ac_cv_env_PORTAUDIOCPP_CFLAGS_value=
ac_cv_env_PORTAUDIOCPP_LIBS_set=
ac_cv_env_PORTAUDIOCPP_LIBS_value=
ac_cv_env_PORTAUDIO_CFLAGS_set=
ac_cv_env_PORTAUDIO_CFLAGS_value=
ac_cv_env_PORTAUDIO_LIBS_set=
ac_cv_env_PORTAUDIO_LIBS_value=
ac_cv_env_PULSEAUDIO_CFLAGS_set=
ac_cv_env_PULSEAUDIO_CFLAGS_value=
ac_cv_env_PULSEAUDIO_LIBS_set=
ac_cv_env_PULSEAUDIO_LIBS_value=
ac_cv_env_SDL2_CFLAGS_set=
ac_cv_env_SDL2_CFLAGS_value=
ac_cv_env_SDL2_LIBS_set=
ac_cv_env_SDL2_LIBS_value=
ac_cv_env_SNDFILE_CFLAGS_set=
ac_cv_env_SNDFILE_CFLAGS_value=
ac_cv_env_SNDFILE_LIBS_set=
ac_cv_env_SNDFILE_LIBS_value=
ac_cv_env_VORBISFILE_CFLAGS_set=
ac_cv_env_VORBISFILE_CFLAGS_value=
ac_cv_env_VORBISFILE_LIBS_set=
ac_cv_env_VORBISFILE_LIBS_value=
ac_cv_env_VORBIS_CFLAGS_set=
ac_cv_env_VORBIS_CFLAGS_value=
ac_cv_env_VORBIS_LIBS_set=
ac_cv_env_VORBIS_LIBS_value=
ac_cv_env_ZLIB_CFLAGS_set=
ac_cv_env_ZLIB_CFLAGS_value=
ac_cv_env_ZLIB_LIBS_set=
ac_cv_env_ZLIB_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_header_dlfcn_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_stdint_h=yes
ac_cv_header_stdio_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_wchar_h=yes
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_objext=o
ac_cv_path_EGREP='/usr/bin/grep -E'
ac_cv_path_FGREP='/usr/bin/grep -F'
ac_cv_path_GREP=/usr/bin/grep
ac_cv_path_SED=/usr/bin/sed
ac_cv_path_ac_pt_DX_PERL=/usr/bin/perl
ac_cv_path_ac_pt_PKG_CONFIG=/usr/bin/pkg-config
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_lt_DD=/usr/bin/dd
ac_cv_path_mkdir=/usr/bin/mkdir
ac_cv_prog_AWK=mawk
ac_cv_prog_CPP='gcc -E'
ac_cv_prog_CXXCPP='g++ -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=gcc
ac_cv_prog_ac_ct_CXX=g++
ac_cv_prog_ac_ct_FILECMD=file
ac_cv_prog_ac_ct_MANIFEST_TOOL=mt
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c11=
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_stdc=
ac_cv_prog_cxx_cxx11=
ac_cv_prog_cxx_g=yes
ac_cv_prog_cxx_stdcxx=
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_should_define__xopen_source=no
ac_cv_sys_file_offset_bits=no
ac_cv_sys_largefile_CC=no
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_CXX_dependencies_compiler_type=gcc3
am_cv_ar_interface=ar
am_cv_make_support_nested_variables=yes
am_cv_prog_cc_c_o=yes
ax_cv_PTHREAD_CLANG=no
ax_cv_PTHREAD_JOINABLE_ATTR=PTHREAD_CREATE_JOINABLE
ax_cv_PTHREAD_PRIO_INHERIT=yes
ax_cv_PTHREAD_SPECIAL_FLAGS=no
ax_cv_c_compiler_vendor=gnu
ax_cv_check_cflags___fno_ipa_ra=yes
ax_cv_check_cflags___fvisibility_hidden=yes
ax_cv_check_cxxflags___fno_ipa_ra=yes
ax_cv_check_cxxflags___fvisibility_hidden=yes
ax_cv_cxx_compile_cxx20__std_cpp20=yes
ax_cv_cxx_compile_cxx23__h_std_cpp23=no
ax_cv_cxx_compile_cxx23__std_cpp23=no
ax_cv_cxx_compile_cxx23__std_cpp23_MSVC=no
ax_cv_cxx_compile_cxx23_pstd_cpp23=no
ax_cv_cxx_exceptions=yes
ax_cv_cxx_rtti=yes
lt_cv_ar_at_file=@
lt_cv_archive_cmds_need_lc=no
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/usr/bin/ld
lt_cv_path_LDCXX='/usr/bin/ld -m elf_x86_64'
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_c_o_CXX=yes
lt_cv_prog_compiler_pic='-fPIC -DPIC'
lt_cv_prog_compiler_pic_CXX='-fPIC -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_pic_works_CXX=yes
lt_cv_prog_compiler_rtti_exceptions=no
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_compiler_static_works_CXX=yes
lt_cv_prog_gnu_ld=yes
lt_cv_prog_gnu_ldcxx=yes
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_shlibpath_overrides_runpath=yes
lt_cv_sys_global_symbol_pipe='/usr/bin/sed -n -e '\''s/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'' | /usr/bin/sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_c_name_address='/usr/bin/sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='/usr/bin/sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(lib.*\)$/  {"\1", (void *) \&\1},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"lib\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_cdecl='/usr/bin/sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_import=
lt_cv_sys_max_cmd_len=1572864
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
lt_cv_truncate_bin='/usr/bin/dd bs=4096 count=1'
pkg_cv_ZLIB_CFLAGS=
pkg_cv_ZLIB_LIBS='-lz '

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} '\''/home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/missing'\'' aclocal-1.16'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='1'
AM_V='$(V)'
AR='ar'
AUTOCONF='${SHELL} '\''/home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/missing'\'' autoconf'
AUTOHEADER='${SHELL} '\''/home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/missing'\'' autoheader'
AUTOMAKE='${SHELL} '\''/home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/missing'\'' automake-1.16'
AWK='mawk'
CC='gcc'
CCDEPMODE='depmode=gcc3'
CFLAGS='-Wall -g -O2'
CPP='gcc -E'
CPPFLAGS=''
CSCOPE='cscope'
CTAGS='ctags'
CXX='g++ -std=c++20'
CXXCPP='g++ -E -std=c++20'
CXXDEPMODE='depmode=gcc3'
CXXFLAGS='-g -O2'
CXXSTDLIB_PCLIBSPRIVATE=''
CYGPATH_W='echo'
DEFS='-DPACKAGE_NAME=\"libopenmpt\" -DPACKAGE_TARNAME=\"libopenmpt\" -DPACKAGE_VERSION=\"0.8.3+release.autotools\" -DPACKAGE_STRING=\"libopenmpt\ 0.8.3+release.autotools\" -DPACKAGE_BUGREPORT=\"https://bugs.openmpt.org/\" -DPACKAGE_URL=\"https://lib.openmpt.org/\" -DPACKAGE=\"libopenmpt\" -DVERSION=\"0.8.3+release.autotools\" -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_STRINGS_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_UNISTD_H=1 -DHAVE_WCHAR_H=1 -DSTDC_HEADERS=1 -D_ALL_SOURCE=1 -D_DARWIN_C_SOURCE=1 -D_GNU_SOURCE=1 -D_HPUX_ALT_XOPEN_SOCKET_API=1 -D_NETBSD_SOURCE=1 -D_OPENBSD_SOURCE=1 -D_POSIX_PTHREAD_SEMANTICS=1 -D__STDC_WANT_IEC_60559_ATTRIBS_EXT__=1 -D__STDC_WANT_IEC_60559_BFP_EXT__=1 -D__STDC_WANT_IEC_60559_DFP_EXT__=1 -D__STDC_WANT_IEC_60559_FUNCS_EXT__=1 -D__STDC_WANT_IEC_60559_TYPES_EXT__=1 -D__STDC_WANT_LIB_EXT2__=1 -D__STDC_WANT_MATH_SPEC_FUNCS__=1 -D_TANDEM_SOURCE=1 -D__EXTENSIONS__=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_CXX20=1 -DHAVE_EXCEPTIONS=/\*\*/ -DHAVE_RTTI=/\*\*/ -DHAVE_PTHREAD_PRIO_INHERIT=1 -DMPT_SVNURL=\"https://source.openmpt.org/svn/openmpt/tags/libopenmpt-0.8.3\" -DMPT_SVNVERSION=\"24141\" -DMPT_SVNDATE=\"2025-09-06T13:42:08.986313Z\" -DMPT_PACKAGE=true'
DEPDIR='.deps'
DLLTOOL='false'
DOT_PATH=''
DOXYGEN_PAPER_SIZE=''
DSYMUTIL=''
DUMPBIN=''
DX_CONFIG='Doxyfile'
DX_DOCDIR='doxygen-doc'
DX_DOT=''
DX_DOXYGEN=''
DX_DVIPS=''
DX_EGREP=''
DX_ENV=' SRCDIR='\''.'\'' PROJECT='\''libopenmpt'\'' VERSION='\''0.8.3+release.autotools'\'' HAVE_DOT='\''NO'\'' GENERATE_MAN='\''NO'\'' GENERATE_RTF='\''NO'\'' GENERATE_XML='\''NO'\'' GENERATE_HTMLHELP='\''NO'\'' GENERATE_CHI='\''NO'\'' GENERATE_HTML='\''NO'\'' GENERATE_LATEX='\''NO'\'''
DX_FLAG_chi='0'
DX_FLAG_chm='0'
DX_FLAG_doc='0'
DX_FLAG_dot='0'
DX_FLAG_html='0'
DX_FLAG_man='0'
DX_FLAG_pdf='0'
DX_FLAG_ps='0'
DX_FLAG_rtf='0'
DX_FLAG_xml='0'
DX_HHC=''
DX_LATEX=''
DX_MAKEINDEX=''
DX_PDFLATEX=''
DX_PERL='/usr/bin/perl'
DX_PROJECT='libopenmpt'
DX_RULES=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/usr/bin/grep -E'
ENABLE_EXAMPLES_FALSE=''
ENABLE_EXAMPLES_TRUE='#'
ENABLE_OPENMPT123_FALSE=''
ENABLE_OPENMPT123_TRUE='#'
ENABLE_TESTS_FALSE=''
ENABLE_TESTS_TRUE='#'
ETAGS='etags'
EXEEXT=''
FGREP='/usr/bin/grep -F'
FILECMD='file'
FLAC_CFLAGS=''
FLAC_LIBS=''
GENERATE_CHI='NO'
GENERATE_HTML='NO'
GENERATE_HTMLHELP='NO'
GENERATE_LATEX='NO'
GENERATE_MAN='NO'
GENERATE_RTF='NO'
GENERATE_XML='NO'
GLOBAL_CFLAGS=' -fvisibility=hidden -pthread -fno-ipa-ra'
GLOBAL_CPPFLAGS=''
GLOBAL_CXXFLAGS=' -fvisibility=hidden -pthread -fno-ipa-ra'
GREP='/usr/bin/grep'
HAVE_CXX17=''
HAVE_CXX20='1'
HAVE_CXX23='0'
HAVE_DOT='NO'
HAVE_PORTAUDIOCPP_FALSE=''
HAVE_PORTAUDIOCPP_TRUE='#'
HAVE_PORTAUDIO_FALSE=''
HAVE_PORTAUDIO_TRUE='#'
HHC_PATH=''
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/usr/bin/ld -m elf_x86_64'
LDFLAGS=''
LIBOBJS=''
LIBOPENMPTTEST_WIN32_LIBS=''
LIBOPENMPT_LIBS_PRIVATE=' '
LIBOPENMPT_LTVER_AGE='5'
LIBOPENMPT_LTVER_CURRENT='5'
LIBOPENMPT_LTVER_REVISION='5'
LIBOPENMPT_REQUIRES_PRIVATE='zlib    '
LIBOPENMPT_WIN32_LIBS=''
LIBS='-lpthread '
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIPO=''
LN_S='ln -s'
LTLIBOBJS=''
LT_SYS_LIBRARY_PATH=''
MAKEINFO='${SHELL} '\''/home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/missing'\'' makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='/usr/bin/mkdir -p'
MPG123_CFLAGS=''
MPG123_LIBS=''
NM='/usr/bin/nm -B'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='o'
OGG_CFLAGS=''
OGG_LIBS=''
OPENMPT123_WIN32_LIBS=''
OTOOL64=''
OTOOL=''
PACKAGE='libopenmpt'
PACKAGE_BUGREPORT='https://bugs.openmpt.org/'
PACKAGE_NAME='libopenmpt'
PACKAGE_STRING='libopenmpt 0.8.3+release.autotools'
PACKAGE_TARNAME='libopenmpt'
PACKAGE_URL='https://lib.openmpt.org/'
PACKAGE_VERSION='0.8.3+release.autotools'
PAPER_SIZE=''
PATH_SEPARATOR=':'
PERL_PATH=''
PKG_CONFIG='/usr/bin/pkg-config'
PKG_CONFIG_LIBDIR=''
PKG_CONFIG_PATH=''
PORTAUDIOCPP_CFLAGS=''
PORTAUDIOCPP_LIBS=''
PORTAUDIO_CFLAGS=''
PORTAUDIO_LIBS=''
PROJECT='libopenmpt'
PTHREAD_CC='gcc'
PTHREAD_CFLAGS='-pthread'
PTHREAD_CXX='g++ -std=c++20'
PTHREAD_LIBS='-lpthread'
PULSEAUDIO_CFLAGS=''
PULSEAUDIO_LIBS=''
RANLIB='ranlib'
SDL2_CFLAGS=''
SDL2_LIBS=''
SED='/usr/bin/sed'
SET_MAKE=''
SHELL='/bin/bash'
SNDFILE_CFLAGS=''
SNDFILE_LIBS=''
SRCDIR='.'
STRIP='strip'
VERSION='0.8.3+release.autotools'
VORBISFILE_CFLAGS=''
VORBISFILE_LIBS=''
VORBIS_CFLAGS=''
VORBIS_LIBS=''
WIN32_CFLAGS=''
WIN32_CONSOLE_CFLAGS=''
WIN32_CONSOLE_CXXFLAGS=''
WIN32_CPPFLAGS=''
WIN32_CXXFLAGS=''
ZLIB_CFLAGS='-DMPT_WITH_ZLIB '
ZLIB_LIBS='-lz '
ac_ct_AR='ar'
ac_ct_CC='gcc'
ac_ct_CXX='g++'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__fastdepCXX_FALSE='#'
am__fastdepCXX_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
ax_pthread_config=''
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='x86_64-pc-linux-gnu'
host_alias=''
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /home/vadim/Проекты/rAudioClasses/plugins_src/libopenmpt-0.8.3/build-aux/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "libopenmpt"
#define PACKAGE_TARNAME "libopenmpt"
#define PACKAGE_VERSION "0.8.3+release.autotools"
#define PACKAGE_STRING "libopenmpt 0.8.3+release.autotools"
#define PACKAGE_BUGREPORT "https://bugs.openmpt.org/"
#define PACKAGE_URL "https://lib.openmpt.org/"
#define PACKAGE "libopenmpt"
#define VERSION "0.8.3+release.autotools"
#define HAVE_STDIO_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_STRINGS_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1
#define HAVE_WCHAR_H 1
#define STDC_HEADERS 1
#define _ALL_SOURCE 1
#define _DARWIN_C_SOURCE 1
#define _GNU_SOURCE 1
#define _HPUX_ALT_XOPEN_SOCKET_API 1
#define _NETBSD_SOURCE 1
#define _OPENBSD_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
#define __STDC_WANT_IEC_60559_BFP_EXT__ 1
#define __STDC_WANT_IEC_60559_DFP_EXT__ 1
#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
#define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
#define __STDC_WANT_LIB_EXT2__ 1
#define __STDC_WANT_MATH_SPEC_FUNCS__ 1
#define _TANDEM_SOURCE 1
#define __EXTENSIONS__ 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define HAVE_CXX20 1
#define HAVE_EXCEPTIONS /**/
#define HAVE_RTTI /**/
#define HAVE_PTHREAD_PRIO_INHERIT 1
#define MPT_SVNURL "https://source.openmpt.org/svn/openmpt/tags/libopenmpt-0.8.3"
#define MPT_SVNVERSION "24141"
#define MPT_SVNDATE "2025-09-06T13:42:08.986313Z"
#define MPT_PACKAGE true

configure: exit 0
