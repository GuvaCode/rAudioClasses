set(PROJECT_NAME StSoundLibrary)

################################################################################
# Source groups
################################################################################
set(Headers
    "digidrum.h"
    "LZH/LZH.H"
    "StSoundLibrary.h"
    "Ym2149Ex.h"
    "YmLoad.h"
    "YmMusic.h"
    "YmTypes.h"
)
source_group("Headers" FILES ${Headers})

set(Sources
    "digidrum.cpp"
    "LZH/LzhLib.cpp"
    "Ym2149Ex.cpp"
    "Ymload.cpp"
    "YmMusic.cpp"
    "YmUserInterface.cpp"
)
source_group("Sources" FILES ${Sources})

set(ALL_FILES
    ${Headers}
    ${Sources}
)

################################################################################
# Target - SHARED библиотека
################################################################################
add_library(${PROJECT_NAME} SHARED ${ALL_FILES})

################################################################################
# Target name
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    OUTPUT_NAME "StSoundLibrary"
)

################################################################################
# Output directory
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_CURRENT_SOURCE_DIR}/Debug"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/Release"
    LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_CURRENT_SOURCE_DIR}/Debug"
    LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/Release"
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_CURRENT_SOURCE_DIR}/Debug"
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/Release"
)

################################################################################
# Compile definitions - для DLL экспорта
################################################################################
target_compile_definitions(${PROJECT_NAME} PRIVATE
    $<$<CONFIG:Debug>:_DEBUG>
    $<$<CONFIG:Release>:NDEBUG>
    WIN32
    _WINDOWS
    STSOUND_EXPORTS  # Для экспорта символов из DLL
)

# Для импортирующих проектов
target_compile_definitions(${PROJECT_NAME} PUBLIC
    $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:STSOUND_STATIC>  # Для статической линковки
)

################################################################################
# Настройки компилятора
################################################################################
# Для MSVC
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE
        /W3
        $<$<CONFIG:Debug>:/Od /RTC1>
        $<$<CONFIG:Release>:/O2 /GF /Gy>
    )
    
    target_link_options(${PROJECT_NAME} PRIVATE
        /NOLOGO
        /DLL
    )
    
    # Настройки runtime библиотек
    set_target_properties(${PROJECT_NAME} PROPERTIES
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL"
    )
endif()

# Для MinGW/GCC
if(MINGW OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # Статическая линковка библиотек GCC чтобы избежать зависимостей
    target_link_options(${PROJECT_NAME} PRIVATE
        -static-libgcc
        -static-libstdc++
        -static
    )
    
    # Компиляционные флаги
    target_compile_options(${PROJECT_NAME} PRIVATE
        -Wall
        -Wextra
        $<$<CONFIG:Debug>:-O0 -g>
        $<$<CONFIG:Release>:-O2>
    )
endif()

################################################################################
# Дополнительные настройки
################################################################################
# Включение C++11 стандарта
set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED ON
)

# Версия библиотеки
set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION 1.0.0
    SOVERSION 1
)

################################################################################
# Дополнительные библиотеки для MinGW
################################################################################
if(MINGW)
    find_library(WINMM_LIBRARY winmm)
    if(WINMM_LIBRARY)
        target_link_libraries(${PROJECT_NAME} PRIVATE ${WINMM_LIBRARY})
    endif()
endif()