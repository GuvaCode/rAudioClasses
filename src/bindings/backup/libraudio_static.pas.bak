unit libraudio_static;

interface

uses
   ctypes;

type
  // Типы данных
  bool = ByteBool;
  
type
  TAudioCallback = procedure(buffferData: pointer; frames: cuint); cdecl;


  // Wave, audio wave data
  PWave = ^TWave;
  TWave = record
    frameCount : cuint;    // Total number of frames (considering channels)
    sampleRate : cuint;    // Frequency (samples per second)
    sampleSize : cuint;    // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    channels   : cuint;    // Number of channels (1-mono, 2-stereo, ...)
    data       : pointer;  // Buffer data pointer
  end;

  // Opaque structs declaration
  PrAudioBuffer = ^TrAudioBuffer;
  TrAudioBuffer = record end;

  PrAudioProcessor = ^TrAudioProcessor;
  TrAudioProcessor = record end;

  // AudioStream, custom audio stream
  TAudioStream = record
    buffer     : PrAudioBuffer;    // Pointer to internal data used by the audio system
    processor  : PrAudioProcessor; // Pointer to internal data processor, useful for audio effects
    sampleRate : cuint;            // Frequency (samples per second)
    sampleSize : cuint;            // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    channels   : cuint;            // Number of channels (1-mono, 2-stereo, ...)
  end;

  // Sound
  PSound = ^TSound;
  TSound = record
    stream     : TAudioStream;    // Audio stream
    frameCount : cuint;           // Total number of frames (considering channels)
  end;

  // Music, audio stream, anything longer than ~10 seconds should be streamed
  PMusic = ^TMusic;
  TMusic = record
    stream     : TAudioStream; // Audio stream
    frameCount : cuint;        // Total number of frames (considering channels)
    looping    : boolean;        // Music looping enable

    ctxType    : cint;         // Type of music context (audio filetype)
    ctxData    : pointer;      // Audio context data, depends on type
  end;

// Audio device management functions
procedure InitAudioDevice; cdecl; external  name 'InitAudioDevice';
procedure CloseAudioDevice; cdecl; external  name 'CloseAudioDevice';
function IsAudioDeviceReady: bool; cdecl; external  name 'IsAudioDeviceReady';
procedure SetMasterVolume(volume: Single); cdecl; external  name 'SetMasterVolume';
function GetMasterVolume: Single; cdecl; external  name 'GetMasterVolume';

// Wave/Sound loading/unloading functions
function LoadWave(fileName: PAnsiChar): TWave; cdecl; external  name 'LoadWave';
function LoadWaveFromMemory(fileType: PAnsiChar; fileData: PByte; dataSize: Integer): TWave; cdecl; external  name 'LoadWaveFromMemory';
function IsWaveReady(wave: TWave): bool; cdecl; external  name 'IsWaveReady';
function LoadSound(fileName: PAnsiChar): TSound; cdecl; external  name 'LoadSound';
function LoadSoundFromWave(wave: TWave): TSound; cdecl; external  name 'LoadSoundFromWave';
function LoadSoundAlias(source: TSound): TSound; cdecl; external  name 'LoadSoundAlias';
function IsSoundReady(sound: TSound): bool; cdecl; external  name 'IsSoundReady';
procedure UpdateSound(sound: TSound; data: Pointer; frameCount: Integer); cdecl; external  name 'UpdateSound';
procedure UnloadWave(wave: TWave); cdecl; external  name 'UnloadWave';
procedure UnloadSound(sound: TSound); cdecl; external  name 'UnloadSound';
procedure UnloadSoundAlias(alias: TSound); cdecl; external  name 'UnloadSoundAlias';
function ExportWave(wave: TWave; fileName: PAnsiChar): bool; cdecl; external  name 'ExportWave';
function ExportWaveAsCode(wave: TWave; fileName: PAnsiChar): bool; cdecl; external  name 'ExportWaveAsCode';

// Wave/Sound management functions
procedure PlaySound(sound: TSound); cdecl; external  name 'PlaySound';
procedure StopSound(sound: TSound); cdecl; external  name 'StopSound';
procedure PauseSound(sound: TSound); cdecl; external  name 'PauseSound';
procedure ResumeSound(sound: TSound); cdecl; external  name 'ResumeSound';
function IsSoundPlaying(sound: TSound): bool; cdecl; external  name 'IsSoundPlaying';
procedure SetSoundVolume(sound: TSound; volume: Single); cdecl; external  name 'SetSoundVolume';
procedure SetSoundPitch(sound: TSound; pitch: Single); cdecl; external  name 'SetSoundPitch';
procedure SetSoundPan(sound: TSound; pan: Single); cdecl; external  name 'SetSoundPan';
function WaveCopy(wave: TWave): TWave; cdecl; external  name 'WaveCopy';
procedure WaveCrop(wave: PWave; initSample: Integer; finalSample: Integer); cdecl; external  name 'WaveCrop';
procedure WaveFormat(wave: PWave; sampleRate: Integer; sampleSize: Integer; channels: Integer); cdecl; external  name 'WaveFormat';
function LoadWaveSamples(wave: TWave): PSingle; cdecl; external  name 'LoadWaveSamples';
procedure UnloadWaveSamples(samples: PSingle); cdecl; external  name 'UnloadWaveSamples';

// Music management functions
function LoadMusicStream(fileName: PAnsiChar): TMusic; cdecl; external  name 'LoadMusicStream';
function LoadMusicStreamFromMemory(fileType: PAnsiChar; data: PByte; dataSize: Integer): TMusic; cdecl; external  name 'LoadMusicStreamFromMemory';
function IsMusicReady(music: TMusic): bool; cdecl; external  name 'IsMusicReady';
procedure UnloadMusicStream(music: TMusic); cdecl; external  name 'UnloadMusicStream';
procedure PlayMusicStream(music: TMusic); cdecl; external  name 'PlayMusicStream';
function IsMusicStreamPlaying(music: TMusic): bool; cdecl; external  name 'IsMusicStreamPlaying';
procedure UpdateMusicStream(music: TMusic); cdecl; external  name 'UpdateMusicStream';
procedure StopMusicStream(music: TMusic); cdecl; external  name 'StopMusicStream';
procedure PauseMusicStream(music: TMusic); cdecl; external  name 'PauseMusicStream';
procedure ResumeMusicStream(music: TMusic); cdecl; external  name 'ResumeMusicStream';
procedure SeekMusicStream(music: TMusic; position: Single); cdecl; external  name 'SeekMusicStream';
procedure SetMusicVolume(music: TMusic; volume: Single); cdecl; external  name 'SetMusicVolume';
procedure SetMusicPitch(music: TMusic; pitch: Single); cdecl; external  name 'SetMusicPitch';
procedure SetMusicPan(music: TMusic; pan: Single); cdecl; external  name 'SetMusicPan';
function GetMusicTimeLength(music: TMusic): Single; cdecl; external  name 'GetMusicTimeLength';
function GetMusicTimePlayed(music: TMusic): Single; cdecl; external  name 'GetMusicTimePlayed';

// AudioStream management functions
function LoadAudioStream(sampleRate: Cardinal; sampleSize: Cardinal; channels: Cardinal): TAudioStream; cdecl; external  name 'LoadAudioStream';
function IsAudioStreamReady(stream: TAudioStream): bool; cdecl; external  name 'IsAudioStreamReady';
procedure UnloadAudioStream(stream: TAudioStream); cdecl; external  name 'UnloadAudioStream';
procedure UpdateAudioStream(stream: TAudioStream; data: Pointer; samplesCount: Integer); cdecl; external  name 'UpdateAudioStream';
function IsAudioStreamProcessed(stream: TAudioStream): bool; cdecl; external  name 'IsAudioStreamProcessed';
procedure PlayAudioStream(stream: TAudioStream); cdecl; external  name 'PlayAudioStream';
procedure PauseAudioStream(stream: TAudioStream); cdecl; external  name 'PauseAudioStream';
procedure ResumeAudioStream(stream: TAudioStream); cdecl; external  name 'ResumeAudioStream';
function IsAudioStreamPlaying(stream: TAudioStream): bool; cdecl; external  name 'IsAudioStreamPlaying';
procedure StopAudioStream(stream: TAudioStream); cdecl; external  name 'StopAudioStream';
procedure SetAudioStreamVolume(stream: TAudioStream; volume: Single); cdecl; external  name 'SetAudioStreamVolume';
procedure SetAudioStreamPitch(stream: TAudioStream; pitch: Single); cdecl; external  name 'SetAudioStreamPitch';
procedure SetAudioStreamPan(stream: TAudioStream; pan: Single); cdecl; external  name 'SetAudioStreamPan';
procedure SetAudioStreamBufferSizeDefault(size: Integer); cdecl; external  name 'SetAudioStreamBufferSizeDefault';
procedure SetAudioStreamCallback(stream: TAudioStream; callback: TAudioCallback); cdecl; external  name 'SetAudioStreamCallback';

procedure AttachAudioStreamProcessor(stream: TAudioStream; processor: TAudioCallback); cdecl; external  name 'AttachAudioStreamProcessor';
procedure DetachAudioStreamProcessor(stream: TAudioStream; processor: TAudioCallback); cdecl; external  name 'DetachAudioStreamProcessor';

procedure AttachAudioMixedProcessor(processor: TAudioCallback); cdecl; external  name 'AttachAudioMixedProcessor';
procedure DetachAudioMixedProcessor(processor: TAudioCallback); cdecl; external  name 'DetachAudioMixedProcessor';

implementation

{$LINKLIB libraudio.a} 

end.
